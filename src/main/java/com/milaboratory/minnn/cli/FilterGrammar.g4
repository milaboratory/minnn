grammar FilterGrammar;

filter : filterInParentheses | anySingleFilter ;
filterInParentheses : OPEN_PARENTHESIS anySingleFilter CLOSED_PARENTHESIS ;
anySingleFilter : or | and | pattern | simpleFilter ;
or : orOperand OR orOperand (OR orOperand)* ;
orOperand : and | pattern | simpleFilter | filterInParentheses ;
and : andOperand AND andOperand (AND andOperand)* ;
andOperand : pattern | simpleFilter | filterInParentheses ;
pattern : groupName TILDE patternString ;
simpleFilter : minGroupQuality | avgGroupQuality | groupNCount | groupNFraction | minConsensusReads | len ;
minGroupQuality : MIN_GROUP_QUALITY OPEN_PARENTHESIS groupNameOrAll CLOSED_PARENTHESIS EQUALS minGroupQualityNum ;
avgGroupQuality : AVG_GROUP_QUALITY OPEN_PARENTHESIS groupNameOrAll CLOSED_PARENTHESIS EQUALS avgGroupQualityNum ;
groupNCount : GROUP_N_COUNT OPEN_PARENTHESIS groupNameOrAll CLOSED_PARENTHESIS EQUALS groupNCountNum ;
groupNFraction : GROUP_N_FRACTION OPEN_PARENTHESIS groupNameOrAll CLOSED_PARENTHESIS EQUALS groupNFractionNum ;
len : LEN OPEN_PARENTHESIS groupNameOrAll CLOSED_PARENTHESIS EQUALS groupLength ;
minConsensusReads : MIN_CONSENSUS_READS EQUALS minConsensusReadsNum ;
patternString : STRING ;
minGroupQualityNum : INT_NUMBER ;
avgGroupQualityNum : INT_NUMBER ;
groupNCountNum : INT_NUMBER ;
groupNFractionNum : FLOAT_NUMBER | INT_NUMBER ;
groupLength : INT_NUMBER ;
minConsensusReadsNum : INT_NUMBER ;
groupName : GROUP_NAME ;
groupNameOrAll : GROUP_NAME | ASTERISK ;

SINGLE_QUOTE : '\'' ;
STRING : SINGLE_QUOTE .*? SINGLE_QUOTE ;
MIN_GROUP_QUALITY : 'MinGroupQuality' ;
AVG_GROUP_QUALITY : 'AvgGroupQuality' ;
GROUP_N_COUNT : 'GroupMaxNCount' ;
GROUP_N_FRACTION : 'GroupMaxNFraction' ;
MIN_CONSENSUS_READS : 'MinConsensusReads' ;
LEN : 'Len' ;
FLOAT_NUMBER : DIGIT+ '.' DIGIT* | '.' DIGIT+ ;
INT_NUMBER : DIGIT+ ;
GROUP_NAME : [0-9a-zA-Z]+ ;
OPEN_PARENTHESIS : '(' ;
CLOSED_PARENTHESIS : ')' ;
EQUALS : '=' ;
TILDE : '~' ;
AND : '&' ;
OR : '|' ;
ASTERISK : '*' ;
WS : [ \t\n\r]+ -> skip ;

fragment DIGIT : [0-9] ;
